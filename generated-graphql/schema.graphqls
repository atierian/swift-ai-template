schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface AmplifyAIConversationMessage {
  aiContext: AWSJSON
  associatedUserMessageId: ID
  content: [AmplifyAIContentBlock]
  conversationId: ID!
  createdAt: AWSDateTime
  id: ID!
  owner: String
  role: AmplifyAIConversationParticipantRole
  toolConfiguration: AmplifyAIToolConfiguration
  updatedAt: AWSDateTime
}

type AmplifyAIContentBlock @aws_cognito_user_pools @aws_iam {
  document: AmplifyAIDocumentBlock
  image: AmplifyAIImageBlock
  text: String
  toolResult: AmplifyAIToolResultBlock
  toolUse: AmplifyAIToolUseBlock
}

type AmplifyAIContentBlockDocument {
  document: AmplifyAIDocumentBlock
}

type AmplifyAIContentBlockImage {
  image: AmplifyAIImageBlock
}

type AmplifyAIContentBlockText {
  text: String
}

type AmplifyAIContentBlockToolResult {
  toolResult: AmplifyAIToolResultBlock
}

type AmplifyAIContentBlockToolUse {
  toolUse: AmplifyAIToolUseBlock
}

type AmplifyAIConversationMessageStreamPart @aws_cognito_user_pools {
  associatedUserMessageId: ID!
  contentBlockDeltaIndex: Int
  contentBlockDoneAtIndex: Int
  contentBlockIndex: Int
  contentBlockText: String
  contentBlockToolUse: AmplifyAIToolUseBlock
  conversationId: ID!
  errors: [AmplifyAIConversationTurnError]
  id: ID!
  owner: String
  stopReason: String
}

type AmplifyAIConversationTurnError @aws_cognito_user_pools {
  errorType: String!
  message: String!
}

type AmplifyAIDocumentBlock @aws_cognito_user_pools @aws_iam {
  format: String!
  name: String!
  source: AmplifyAIDocumentBlockSource!
}

type AmplifyAIDocumentBlockSource @aws_cognito_user_pools @aws_iam {
  bytes: String
}

type AmplifyAIImageBlock @aws_cognito_user_pools @aws_iam {
  format: String!
  source: AmplifyAIImageBlockSource!
}

type AmplifyAIImageBlockSource @aws_cognito_user_pools @aws_iam {
  bytes: String
}

type AmplifyAITool @aws_cognito_user_pools @aws_iam {
  toolSpec: AmplifyAIToolSpecification
}

type AmplifyAIToolConfiguration @aws_cognito_user_pools @aws_iam {
  tools: [AmplifyAITool]
}

type AmplifyAIToolInputSchema @aws_cognito_user_pools @aws_iam {
  json: AWSJSON
}

type AmplifyAIToolResultBlock @aws_cognito_user_pools @aws_iam {
  content: [AmplifyAIToolResultContentBlock!]!
  status: String
  toolUseId: String!
}

type AmplifyAIToolResultContentBlock @aws_cognito_user_pools @aws_iam {
  document: AmplifyAIDocumentBlock
  image: AmplifyAIImageBlock
  json: AWSJSON
  text: String
}

type AmplifyAIToolSpecification @aws_cognito_user_pools @aws_iam {
  description: String
  inputSchema: AmplifyAIToolInputSchema!
  name: String!
}

type AmplifyAIToolUseBlock @aws_cognito_user_pools @aws_iam {
  input: AWSJSON!
  name: String!
  toolUseId: String!
}

type ConversationAssistantChat @aws_cognito_user_pools @aws_iam {
  createdAt: AWSDateTime!
  id: ID!
  messages(filter: ModelConversationMessageAssistantChatFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelConversationMessageAssistantChatConnection
  metadata: AWSJSON
  name: String
  owner: String
  updatedAt: AWSDateTime!
}

type ConversationMessageAssistantChat implements AmplifyAIConversationMessage @aws_cognito_user_pools @aws_iam {
  aiContext: AWSJSON
  associatedUserMessageId: ID
  content: [AmplifyAIContentBlock]
  conversation: ConversationAssistantChat
  conversationId: ID!
  createdAt: AWSDateTime!
  id: ID!
  owner: String
  role: AmplifyAIConversationParticipantRole
  toolConfiguration: AmplifyAIToolConfiguration
  updatedAt: AWSDateTime!
}

type GenerateRecipeReturnType @aws_cognito_user_pools {
  ingredients: [String!]!
  instructions: String!
  name: String!
}

type ModelConversationAssistantChatConnection @aws_cognito_user_pools @aws_iam {
  items: [ConversationAssistantChat]!
  nextToken: String
}

type ModelConversationMessageAssistantChatConnection @aws_cognito_user_pools @aws_iam {
  items: [ConversationMessageAssistantChat]!
  nextToken: String
}

type Mutation {
  assistantChat(aiContext: AWSJSON, content: [AmplifyAIContentBlockInput], conversationId: ID!, toolConfiguration: AmplifyAIToolConfigurationInput): AmplifyAIConversationMessage @aws_cognito_user_pools @aws_iam
  createAssistantResponseAssistantChat(input: CreateConversationMessageAssistantChatAssistantInput!): ConversationMessageAssistantChat @aws_cognito_user_pools
  createAssistantResponseStreamAssistantChat(input: CreateConversationMessageAssistantChatAssistantStreamingInput!): AmplifyAIConversationMessageStreamPart @aws_cognito_user_pools
  createConversationAssistantChat(condition: ModelConversationAssistantChatConditionInput, input: CreateConversationAssistantChatInput!): ConversationAssistantChat @aws_cognito_user_pools @aws_iam
  createConversationMessageAssistantChat(condition: ModelConversationMessageAssistantChatConditionInput, input: CreateConversationMessageAssistantChatInput!): ConversationMessageAssistantChat @aws_cognito_user_pools @aws_iam
  deleteConversationAssistantChat(condition: ModelConversationAssistantChatConditionInput, input: DeleteConversationAssistantChatInput!): ConversationAssistantChat @aws_cognito_user_pools @aws_iam
  deleteConversationMessageAssistantChat(condition: ModelConversationMessageAssistantChatConditionInput, input: DeleteConversationMessageAssistantChatInput!): ConversationMessageAssistantChat @aws_cognito_user_pools @aws_iam
  updateConversationAssistantChat(condition: ModelConversationAssistantChatConditionInput, input: UpdateConversationAssistantChatInput!): ConversationAssistantChat @aws_cognito_user_pools @aws_iam
}

type Query {
  generateRecipe(description: String): GenerateRecipeReturnType @aws_cognito_user_pools @aws_iam
  getConversationAssistantChat(id: ID!): ConversationAssistantChat @aws_cognito_user_pools @aws_iam
  getConversationMessageAssistantChat(id: ID!): ConversationMessageAssistantChat @aws_cognito_user_pools @aws_iam
  listConversationAssistantChats(filter: ModelConversationAssistantChatFilterInput, limit: Int, nextToken: String): ModelConversationAssistantChatConnection @aws_cognito_user_pools @aws_iam
  listConversationMessageAssistantChats(filter: ModelConversationMessageAssistantChatFilterInput, limit: Int, nextToken: String): ModelConversationMessageAssistantChatConnection @aws_cognito_user_pools @aws_iam
}

type Subscription {
  onCreateAssistantResponseAssistantChat(conversationId: ID): AmplifyAIConversationMessageStreamPart @aws_cognito_user_pools @aws_subscribe(mutations : ["createAssistantResponseStreamAssistantChat"])
  onCreateConversationMessageAssistantChat(filter: ModelSubscriptionConversationMessageAssistantChatFilterInput, owner: String): ConversationMessageAssistantChat @aws_cognito_user_pools @aws_iam @aws_subscribe(mutations : ["createConversationMessageAssistantChat"])
}

enum AmplifyAIConversationParticipantRole {
  assistant
  user
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input AmplifyAIContentBlockInput {
  document: AmplifyAIDocumentBlockInput
  image: AmplifyAIImageBlockInput
  text: String
  toolResult: AmplifyAIToolResultBlockInput
  toolUse: AmplifyAIToolUseBlockInput
}

input AmplifyAIConversationTurnErrorInput {
  errorType: String!
  message: String!
}

input AmplifyAIDocumentBlockInput {
  format: String!
  name: String!
  source: AmplifyAIDocumentBlockSourceInput!
}

input AmplifyAIDocumentBlockSourceInput {
  bytes: String
}

input AmplifyAIImageBlockInput {
  format: String!
  source: AmplifyAIImageBlockSourceInput!
}

input AmplifyAIImageBlockSourceInput {
  bytes: String
}

input AmplifyAIToolConfigurationInput {
  tools: [AmplifyAIToolInput]
}

input AmplifyAIToolInput {
  toolSpec: AmplifyAIToolSpecificationInput
}

input AmplifyAIToolInputSchemaInput {
  json: AWSJSON
}

input AmplifyAIToolResultBlockInput {
  content: [AmplifyAIToolResultContentBlockInput!]!
  status: String
  toolUseId: String!
}

input AmplifyAIToolResultContentBlockInput {
  document: AmplifyAIDocumentBlockInput
  image: AmplifyAIImageBlockInput
  json: AWSJSON
  text: String
}

input AmplifyAIToolSpecificationInput {
  description: String
  inputSchema: AmplifyAIToolInputSchemaInput!
  name: String!
}

input AmplifyAIToolUseBlockInput {
  input: AWSJSON!
  name: String!
  toolUseId: String!
}

input CreateConversationAssistantChatInput {
  id: ID
  metadata: AWSJSON
  name: String
}

input CreateConversationMessageAssistantChatAssistantInput {
  associatedUserMessageId: ID
  content: [AmplifyAIContentBlockInput]
  conversationId: ID
}

input CreateConversationMessageAssistantChatAssistantStreamingInput {
  accumulatedTurnContent: [AmplifyAIContentBlockInput]
  associatedUserMessageId: ID!
  contentBlockDeltaIndex: Int
  contentBlockDoneAtIndex: Int
  contentBlockIndex: Int
  contentBlockText: String
  contentBlockToolUse: AWSJSON
  conversationId: ID!
  errors: [AmplifyAIConversationTurnErrorInput]
  stopReason: String
}

input CreateConversationMessageAssistantChatInput {
  aiContext: AWSJSON
  associatedUserMessageId: ID
  content: [AmplifyAIContentBlockInput]
  conversationId: ID!
  id: ID
  role: AmplifyAIConversationParticipantRole
  toolConfiguration: AmplifyAIToolConfigurationInput
}

input DeleteConversationAssistantChatInput {
  id: ID!
}

input DeleteConversationMessageAssistantChatInput {
  id: ID!
}

input ModelAmplifyAIConversationParticipantRoleInput {
  eq: AmplifyAIConversationParticipantRole
  ne: AmplifyAIConversationParticipantRole
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelConversationAssistantChatConditionInput {
  and: [ModelConversationAssistantChatConditionInput]
  createdAt: ModelStringInput
  metadata: ModelStringInput
  name: ModelStringInput
  not: ModelConversationAssistantChatConditionInput
  or: [ModelConversationAssistantChatConditionInput]
  owner: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelConversationAssistantChatFilterInput {
  and: [ModelConversationAssistantChatFilterInput]
  createdAt: ModelStringInput
  id: ModelIDInput
  metadata: ModelStringInput
  name: ModelStringInput
  not: ModelConversationAssistantChatFilterInput
  or: [ModelConversationAssistantChatFilterInput]
  owner: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelConversationMessageAssistantChatConditionInput {
  aiContext: ModelStringInput
  and: [ModelConversationMessageAssistantChatConditionInput]
  associatedUserMessageId: ModelIDInput
  conversationId: ModelIDInput
  createdAt: ModelStringInput
  not: ModelConversationMessageAssistantChatConditionInput
  or: [ModelConversationMessageAssistantChatConditionInput]
  owner: ModelStringInput
  role: ModelAmplifyAIConversationParticipantRoleInput
  updatedAt: ModelStringInput
}

input ModelConversationMessageAssistantChatFilterInput {
  aiContext: ModelStringInput
  and: [ModelConversationMessageAssistantChatFilterInput]
  associatedUserMessageId: ModelIDInput
  conversationId: ModelIDInput
  createdAt: ModelStringInput
  id: ModelIDInput
  not: ModelConversationMessageAssistantChatFilterInput
  or: [ModelConversationMessageAssistantChatFilterInput]
  owner: ModelStringInput
  role: ModelAmplifyAIConversationParticipantRoleInput
  updatedAt: ModelStringInput
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelSubscriptionBooleanInput {
  eq: Boolean
  ne: Boolean
}

input ModelSubscriptionConversationMessageAssistantChatFilterInput {
  aiContext: ModelSubscriptionStringInput
  and: [ModelSubscriptionConversationMessageAssistantChatFilterInput]
  associatedUserMessageId: ModelSubscriptionIDInput
  conversationId: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  or: [ModelSubscriptionConversationMessageAssistantChatFilterInput]
  owner: ModelStringInput
  role: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionFloatInput {
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  in: [Float]
  le: Float
  lt: Float
  ne: Float
  notIn: [Float]
}

input ModelSubscriptionIDInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  in: [ID]
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  notIn: [ID]
}

input ModelSubscriptionIntInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  in: [Int]
  le: Int
  lt: Int
  ne: Int
  notIn: [Int]
}

input ModelSubscriptionStringInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  in: [String]
  le: String
  lt: String
  ne: String
  notContains: String
  notIn: [String]
}

input UpdateConversationAssistantChatInput {
  id: ID!
  metadata: AWSJSON
  name: String
}
